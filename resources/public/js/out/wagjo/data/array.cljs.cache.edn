;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{reduce peek cat conj! pop! conj empty? pop assoc! reduce-kv nth split-at update empty array? clone count assoc}, :name wagjo.data.array, :imports nil, :requires nil, :uses nil, :defs {rip {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 367, :column 7, :end-line 367, :end-column 10, :arglists (quote ([a index])), :doc "Returns result of ripping array at index pos.\n  Returns [pre-arr item suf-arr]. Throws exception for empty array."}, :name wagjo.data.array/rip, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 10, :method-params ([a index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 367, :end-line 367, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a index])), :doc "Returns result of ripping array at index pos.\n  Returns [pre-arr item suf-arr]. Throws exception for empty array."}, reduce {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 428, :column 7, :end-line 428, :end-column 13, :arglists (quote ([f init a])), :doc "Array reduce. Faster variant of clojure.core/reduce."}, :name wagjo.data.array/reduce, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 13, :method-params ([f init a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 428, :end-line 428, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init a])), :doc "Array reduce. Faster variant of clojure.core/reduce."}, peek-unchecked {:name wagjo.data.array/peek-unchecked, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 101, :column 1, :end-line 101, :end-column 20, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 101, :column 6, :end-line 101, :end-column 20}}, popr {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 253, :column 7, :end-line 253, :end-column 11, :arglists (quote ([a])), :doc "Returns new array without last item. If the array is empty,\n  throws an exception."}, :name wagjo.data.array/popr, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 11, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Returns new array without last item. If the array is empty,\n  throws an exception."}, peekl {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 73, :column 7, :end-line 73, :end-column 12, :arglists (quote ([a])), :doc "Same as, but much more efficient than, first.\n  If the array is empty, returns nil."}, :name wagjo.data.array/peekl, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Same as, but much more efficient than, first.\n  If the array is empty, returns nil."}, splice-arr {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 330, :column 7, :end-line 330, :end-column 17, :arglists (quote ([a index n val-arr])), :doc "Returns new array with n items starting at index pos\n  replaced with items in val-arr."}, :name wagjo.data.array/splice-arr, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 17, :method-params ([a index n val-arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a index n val-arr])), :doc "Returns new array with n items starting at index pos\n  replaced with items in val-arr."}, peek {:name wagjo.data.array/peek, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 87, :column 1, :end-line 87, :end-column 10, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 87, :column 6, :end-line 87, :end-column 10}}, mape {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 400, :column 7, :end-line 400, :end-column 11, :arglists (quote ([f a])), :doc "Eager array map. Returns new array.\n  f takes element as an argument.\n  Eager version of clojure.core/map."}, :name wagjo.data.array/mape, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 11, :method-params ([f a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f a])), :doc "Eager array map. Returns new array.\n  f takes element as an argument.\n  Eager version of clojure.core/map."}, remove-after! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 202, :column 7, :end-line 202, :end-column 20, :arglists (quote ([a index])), :doc "Removes all items from array a after index (including index).\n  Mutates input array. Returns the array of removed items."}, :name wagjo.data.array/remove-after!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 20, :method-params ([a index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a index])), :doc "Removes all items from array a after index (including index).\n  Mutates input array. Returns the array of removed items."}, remove-n! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 196, :column 7, :end-line 196, :end-column 16, :arglists (quote ([a index n])), :doc "Removes n items from array a starting at index.\n  Mutates input array. Returns the array of removed items."}, :name wagjo.data.array/remove-n!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 16, :method-params ([a index n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index n])), :doc "Removes n items from array a starting at index.\n  Mutates input array. Returns the array of removed items."}, insert-before {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 338, :column 7, :end-line 338, :end-column 20, :arglists (quote ([a index val])), :doc "Returns a new array with val inserted before index."}, :name wagjo.data.array/insert-before, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 20, :method-params ([a index val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index val])), :doc "Returns a new array with val inserted before index."}, sew {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 377, :column 7, :end-line 377, :end-column 10, :arglists (quote ([pre-arr item-arr suf-arr])), :doc "Returns sewed array. Kinda opposite of rip."}, :name wagjo.data.array/sew, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 10, :method-params ([pre-arr item-arr suf-arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 377, :end-line 377, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pre-arr item-arr suf-arr])), :doc "Returns sewed array. Kinda opposite of rip."}, reduce-kv-reverse {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 515, :column 7, :end-line 515, :end-column 24, :arglists (quote ([f init a])), :doc "Reverse array reduce. Very fast."}, :name wagjo.data.array/reduce-kv-reverse, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 24, :method-params ([f init a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 515, :end-line 515, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init a])), :doc "Reverse array reduce. Very fast."}, conjr-arr {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 315, :column 7, :end-line 315, :end-column 16, :arglists (quote ([a val-arr])), :doc "conj[oin]. Returns a new array with var-arr added to the right."}, :name wagjo.data.array/conjr-arr, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 16, :method-params ([a val-arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a val-arr])), :doc "conj[oin]. Returns a new array with var-arr added to the right."}, cat {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 239, :column 7, :end-line 239, :end-column 10, :arglists (quote ([a1 a2])), :doc "Returns new array which is a concatenation of a1 and a2.\n  Eager version of clojure.core/concat."}, :name wagjo.data.array/cat, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 10, :method-params ([a1 a2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a1 a2])), :doc "Returns new array which is a concatenation of a1 and a2.\n  Eager version of clojure.core/concat."}, nth* {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 59, :column 7, :end-line 59, :end-column 11, :arglists (quote ([a index not-found])), :doc "Returns the value at the index or not-found, if index\n  out of bounds. Faster variant of clojure.core/nth"}, :name wagjo.data.array/nth*, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 11, :method-params ([a index not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index not-found])), :doc "Returns the value at the index or not-found, if index\n  out of bounds. Faster variant of clojure.core/nth"}, conj! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 134, :column 7, :end-line 134, :end-column 12, :arglists (quote ([a x])), :doc "Appends x at array a. Mutates input array. Returns nil."}, :name wagjo.data.array/conj!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a x])), :doc "Appends x at array a. Mutates input array. Returns nil."}, index-of-from {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 549, :column 7, :end-line 549, :end-column 20, :arglists (quote ([a val index-from])), :doc "Returns index of val inside a, starting at\n  index-from. Returns -1 if val was not found."}, :name wagjo.data.array/index-of-from, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 20, :method-params ([a val index-from]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 549, :end-line 549, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a val index-from])), :doc "Returns index of val inside a, starting at\n  index-from. Returns -1 if val was not found."}, pop! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 110, :column 7, :end-line 110, :end-column 11, :arglists (quote ([a])), :doc "Removes the last item from a. If the array is empty,\n  throws an exception. Mutates input array. Returns nil."}, :name wagjo.data.array/pop!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 11, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Removes the last item from a. If the array is empty,\n  throws an exception. Mutates input array. Returns nil."}, conj {:name wagjo.data.array/conj, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 307, :column 1, :end-line 307, :end-column 10, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 307, :column 6, :end-line 307, :end-column 10}}, remove-at! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 190, :column 7, :end-line 190, :end-column 17, :arglists (quote ([a index])), :doc "Removes one item from array a at index.\n  Mutates input array. Returns the array of removed items."}, :name wagjo.data.array/remove-at!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 17, :method-params ([a index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a index])), :doc "Removes one item from array a at index.\n  Mutates input array. Returns the array of removed items."}, conjl {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 293, :column 7, :end-line 293, :end-column 12, :arglists (quote ([a val])), :doc "conj[oin]. Returns a new array with var added to the left."}, :name wagjo.data.array/conjl, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a val])), :doc "conj[oin]. Returns a new array with var added to the left."}, splice! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 140, :column 7, :end-line 140, :end-column 14, :arglists (quote ([a index n x])), :doc "Less clever array splice. Removes n elements after index\n  (including index) before inserting. Inserts just one element\n  x at index. Mutates input array. Returns array of removed items."}, :name wagjo.data.array/splice!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 14, :method-params ([a index n x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a index n x])), :doc "Less clever array splice. Removes n elements after index\n  (including index) before inserting. Inserts just one element\n  x at index. Mutates input array. Returns array of removed items."}, conjr {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 300, :column 7, :end-line 300, :end-column 12, :arglists (quote ([a val])), :doc "conj[oin]. Returns a new array with var added to the right."}, :name wagjo.data.array/conjr, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a val])), :doc "conj[oin]. Returns a new array with var added to the right."}, insert-before-seq! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 176, :column 7, :end-line 176, :end-column 25, :arglists (quote ([a index xs])), :doc "Inserts xs into array a at index.\n  Mutates input array. Returns nil."}, :name wagjo.data.array/insert-before-seq!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 25, :method-params ([a index xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index xs])), :doc "Inserts xs into array a at index.\n  Mutates input array. Returns nil."}, reduce2 {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 442, :column 7, :end-line 442, :end-column 14, :arglists (quote ([f a])), :doc "Array reduce without starting value.\n  Faster variant of clojure.core/reduce."}, :name wagjo.data.array/reduce2, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 14, :method-params ([f a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 442, :end-line 442, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f a])), :doc "Array reduce without starting value.\n  Faster variant of clojure.core/reduce."}, remove-before! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 208, :column 7, :end-line 208, :end-column 21, :arglists (quote ([a index])), :doc "Removes all items from array a after index (including index).\n  Mutates input array. Returns the array of removed items."}, :name wagjo.data.array/remove-before!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 21, :method-params ([a index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a index])), :doc "Removes all items from array a after index (including index).\n  Mutates input array. Returns the array of removed items."}, conjl-arr {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 309, :column 7, :end-line 309, :end-column 16, :arglists (quote ([a val-arr])), :doc "conj[oin]. Returns a new array with var-arr added to the left.\n  Order of elements is retained."}, :name wagjo.data.array/conjl-arr, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 16, :method-params ([a val-arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a val-arr])), :doc "conj[oin]. Returns a new array with var-arr added to the left.\n  Order of elements is retained."}, conj-arr {:name wagjo.data.array/conj-arr, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 320, :column 1, :end-line 320, :end-column 14, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 320, :column 6, :end-line 320, :end-column 14}}, empty? {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 35, :column 16, :end-line 35, :end-column 22, :tag boolean, :arglists (quote ([a])), :doc "Returns true if a is empty array or nil.\n  Faster variant of clojure.core/empty?."}, :name wagjo.data.array/empty?, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 22, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :ret-tag boolean, :end-line 35, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([a])), :doc "Returns true if a is empty array or nil.\n  Faster variant of clojure.core/empty?."}, splice-seq! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 147, :column 7, :end-line 147, :end-column 18, :arglists (quote ([a index n xs])), :doc "Clever array splice. Works just like Array.splice()\n  (Changes the content of an array, adding new elements while removing\n  old elements). Inserts elements from xs into a at index\n  after removing n elements from that position.\n  Mutates input array. Returns array of removed items."}, :name wagjo.data.array/splice-seq!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 18, :method-params ([a index n xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a index n xs])), :doc "Clever array splice. Works just like Array.splice()\n  (Changes the content of an array, adding new elements while removing\n  old elements). Inserts elements from xs into a at index\n  after removing n elements from that position.\n  Mutates input array. Returns array of removed items."}, splice {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 322, :column 7, :end-line 322, :end-column 13, :arglists (quote ([a index n val])), :doc "Returns new array with n items starting at index pos\n  replaced with val."}, :name wagjo.data.array/splice, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 13, :method-params ([a index n val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 322, :end-line 322, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a index n val])), :doc "Returns new array with n items starting at index pos\n  replaced with val."}, popr-unchecked {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 269, :column 7, :end-line 269, :end-column 21, :arglists (quote ([a])), :doc "Returns new array without last item.\n  Undefined behavior if the array is empty."}, :name wagjo.data.array/popr-unchecked, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 21, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Returns new array without last item.\n  Undefined behavior if the array is empty."}, nth-unchecked {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 67, :column 7, :end-line 67, :end-column 20, :arglists (quote ([a index])), :doc "Returns the value at the index. Does not check for boundaries.\n  Faster variant of clojure.core/nth."}, :name wagjo.data.array/nth-unchecked, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 20, :method-params ([a index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a index])), :doc "Returns the value at the index. Does not check for boundaries.\n  Faster variant of clojure.core/nth."}, insert-before-arr! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 183, :column 7, :end-line 183, :end-column 25, :arglists (quote ([a index axs])), :doc "Inserts axs represented as array into array a at index.\n  Mutates input array. Returns nil."}, :name wagjo.data.array/insert-before-arr!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 25, :method-params ([a index axs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index axs])), :doc "Inserts axs represented as array into array a at index.\n  Mutates input array. Returns nil."}, insert-before! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 169, :column 7, :end-line 169, :end-column 21, :arglists (quote ([a index x])), :doc "Inserts x into array a at index.\n  Mutates input array. Returns nil."}, :name wagjo.data.array/insert-before!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 21, :method-params ([a index x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index x])), :doc "Inserts x into array a at index.\n  Mutates input array. Returns nil."}, peekl-unchecked {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 89, :column 7, :end-line 89, :end-column 22, :arglists (quote ([a])), :doc "Same as, but much more efficient than, first.\n  Undefined behavior if the array is empty."}, :name wagjo.data.array/peekl-unchecked, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 22, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Same as, but much more efficient than, first.\n  Undefined behavior if the array is empty."}, pop {:name wagjo.data.array/pop, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 261, :column 1, :end-line 261, :end-column 9, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 261, :column 6, :end-line 261, :end-column 9}}, reduce2-kv {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 500, :column 7, :end-line 500, :end-column 17, :arglists (quote ([f a])), :doc "Array reduce-kv, without starting value.\n  Faster variant of clojure.core/reduce-kv."}, :name wagjo.data.array/reduce2-kv, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 17, :method-params ([f a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 500, :end-line 500, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f a])), :doc "Array reduce-kv, without starting value.\n  Faster variant of clojure.core/reduce-kv."}, popl-unchecked {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 263, :column 7, :end-line 263, :end-column 21, :arglists (quote ([a])), :doc "Returns new array without first item.\n  Undefined behavior if the array is empty."}, :name wagjo.data.array/popl-unchecked, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 21, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Returns new array without first item.\n  Undefined behavior if the array is empty."}, assoc! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 119, :column 7, :end-line 119, :end-column 13, :arglists (quote ([a index val])), :doc "Sets the val at index. Mutates input array.\n  Note - index must be <= (count a). Returns nil."}, :name wagjo.data.array/assoc!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 13, :method-params ([a index val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index val])), :doc "Sets the val at index. Mutates input array.\n  Note - index must be <= (count a). Returns nil."}, reduce-kv {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 486, :column 7, :end-line 486, :end-column 16, :arglists (quote ([f init a])), :doc "Array reduce-kv. Faster variant of clojure.core/reduce-kv."}, :name wagjo.data.array/reduce-kv, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 16, :method-params ([f init a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 486, :end-line 486, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init a])), :doc "Array reduce-kv. Faster variant of clojure.core/reduce-kv."}, nth {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 50, :column 7, :end-line 50, :end-column 10, :arglists (quote ([a index])), :doc "Returns the value at the index. nth throws an exception if index\n  out of bounds. Faster variant of clojure.core/nth"}, :name wagjo.data.array/nth, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 10, :method-params ([a index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a index])), :doc "Returns the value at the index. nth throws an exception if index\n  out of bounds. Faster variant of clojure.core/nth"}, split-at {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 234, :column 7, :end-line 234, :end-column 15, :arglists (quote ([a index])), :doc "Returns vector of arrays produced by splitting a at index pos."}, :name wagjo.data.array/split-at, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 15, :method-params ([a index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a index])), :doc "Returns vector of arrays produced by splitting a at index pos."}, peekr-unchecked {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 95, :column 7, :end-line 95, :end-column 22, :arglists (quote ([a])), :doc "Same as, but much more efficient than, last.\n  Undefined behavior if the array is empty."}, :name wagjo.data.array/peekr-unchecked, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 22, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Same as, but much more efficient than, last.\n  Undefined behavior if the array is empty."}, update {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 285, :column 7, :end-line 285, :end-column 13, :arglists (quote ([a index f])), :doc "Returns a new array that contains updated val at index.\n  Note - index must be < (count array)."}, :name wagjo.data.array/update, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 13, :method-params ([a index f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index f])), :doc "Returns a new array that contains updated val at index.\n  Note - index must be < (count array)."}, pop-unchecked {:name wagjo.data.array/pop-unchecked, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 275, :column 1, :end-line 275, :end-column 19, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 275, :column 6, :end-line 275, :end-column 19}}, reduce2-reverse {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 470, :column 7, :end-line 470, :end-column 22, :arglists (quote ([f a])), :doc "Reverse array reduce without starting value.\n  Very fast."}, :name wagjo.data.array/reduce2-reverse, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 22, :method-params ([f a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 470, :end-line 470, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f a])), :doc "Reverse array reduce without starting value.\n  Very fast."}, mape-indexed {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 414, :column 7, :end-line 414, :end-column 19, :arglists (quote ([f a])), :doc "Eager array map-indexed. Returns new array.\n  f takes two arguments, index and element.\n  Eager version of clojure.core/map-indexed."}, :name wagjo.data.array/mape-indexed, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 19, :method-params ([f a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 414, :end-line 414, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f a])), :doc "Eager array map-indexed. Returns new array.\n  f takes two arguments, index and element.\n  Eager version of clojure.core/map-indexed."}, empty {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 23, :column 7, :end-line 23, :end-column 12, :arglists (quote ([])), :doc "Returns an empty array."}, :name wagjo.data.array/empty, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns an empty array."}, slice-from {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 222, :column 7, :end-line 222, :end-column 17, :arglists (quote ([a start])), :doc "Returns the subarray of a beginning at start inclusive, until the\n  end of array."}, :name wagjo.data.array/slice-from, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 17, :method-params ([a start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a start])), :doc "Returns the subarray of a beginning at start inclusive, until the\n  end of array."}, insert-before-arr {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 345, :column 7, :end-line 345, :end-column 24, :arglists (quote ([a index val-arr])), :doc "Returns a new array with val-arr inserted before index."}, :name wagjo.data.array/insert-before-arr, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 24, :method-params ([a index val-arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index val-arr])), :doc "Returns a new array with val-arr inserted before index."}, slice-to {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 228, :column 7, :end-line 228, :end-column 15, :arglists (quote ([a end])), :doc "Returns the subarray of a from its start, and ending\n  at end, exclusive."}, :name wagjo.data.array/slice-to, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 15, :method-params ([a end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a end])), :doc "Returns the subarray of a from its start, and ending\n  at end, exclusive."}, remove-at {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 352, :column 7, :end-line 352, :end-column 16, :arglists (quote ([a index])), :doc "Returns new array with item at index position removed."}, :name wagjo.data.array/remove-at, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 16, :method-params ([a index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a index])), :doc "Returns new array with item at index position removed."}, popl {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 245, :column 7, :end-line 245, :end-column 11, :arglists (quote ([a])), :doc "Returns new array without first item. If the array is empty,\n  throws an exception."}, :name wagjo.data.array/popl, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 11, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Returns new array without first item. If the array is empty,\n  throws an exception."}, array? {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 30, :column 16, :end-line 30, :end-column 22, :tag boolean, :arglists (quote ([a])), :doc "Returns true if a is an array."}, :name wagjo.data.array/array?, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 22, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :ret-tag boolean, :end-line 30, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([a])), :doc "Returns true if a is an array."}, clone {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 105, :column 7, :end-line 105, :end-column 12, :arglists (quote ([a])), :doc "Returns cloned copy of array."}, :name wagjo.data.array/clone, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Returns cloned copy of array."}, splice-arr! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 158, :column 7, :end-line 158, :end-column 18, :arglists (quote ([a index n axs])), :doc "Clever array splice. Works just like Array.splice()\n  (Changes the content of an array, adding new elements while removing\n  old elements). Inserts elements from axs into a at index\n  after removing n elements from that position.\n  Mutates input array. Returns array of removed items."}, :name wagjo.data.array/splice-arr!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 18, :method-params ([a index n axs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a index n axs])), :doc "Clever array splice. Works just like Array.splice()\n  (Changes the content of an array, adding new elements while removing\n  old elements). Inserts elements from axs into a at index\n  after removing n elements from that position.\n  Mutates input array. Returns array of removed items."}, slice {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 216, :column 7, :end-line 216, :end-column 12, :arglists (quote ([a start end])), :doc "Returns the subarray of a beginning at start inclusive, and ending\n  at end, exclusive."}, :name wagjo.data.array/slice, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a start end])), :doc "Returns the subarray of a beginning at start inclusive, and ending\n  at end, exclusive."}, count {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 42, :column 7, :end-line 42, :end-column 12, :arglists (quote ([a])), :doc "Returns the number of items in the array.\n  (count nil) returns 0. Faster variant of clojure.core/count."}, :name wagjo.data.array/count, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Returns the number of items in the array.\n  (count nil) returns 0. Faster variant of clojure.core/count."}, reduce-reverse {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 457, :column 7, :end-line 457, :end-column 21, :arglists (quote ([f init a])), :doc "Reverse array reduce. Very fast."}, :name wagjo.data.array/reduce-reverse, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 21, :method-params ([f init a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init a])), :doc "Reverse array reduce. Very fast."}, assoc {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 277, :column 7, :end-line 277, :end-column 12, :arglists (quote ([a index val])), :doc "Assoc[iate]. Returns a new array that contains val at index.\n  Note - index must be <= (count array)."}, :name wagjo.data.array/assoc, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a index val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index val])), :doc "Assoc[iate]. Returns a new array that contains val at index.\n  Note - index must be <= (count array)."}, remove-n {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 359, :column 7, :end-line 359, :end-column 15, :arglists (quote ([a index n])), :doc "Returns new array with n items starting at index position\n  (index position included) removed."}, :name wagjo.data.array/remove-n, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 15, :method-params ([a index n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index n])), :doc "Returns new array with n items starting at index position\n  (index position included) removed."}, trimr {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 387, :column 7, :end-line 387, :end-column 12, :arglists (quote ([a n])), :doc "Returns new array with n items trimmed from right."}, :name wagjo.data.array/trimr, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Returns new array with n items trimmed from right."}, update! {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 126, :column 7, :end-line 126, :end-column 14, :arglists (quote ([a index f])), :doc "Sets the val at index. Mutates input array. f is a function that\n  will take the old value and return the new value.\n  Note - index must be < (count a). Returns nil."}, :name wagjo.data.array/update!, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 14, :method-params ([a index f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a index f])), :doc "Sets the val at index. Mutates input array. f is a function that\n  will take the old value and return the new value.\n  Note - index must be < (count a). Returns nil."}, peekr {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 80, :column 7, :end-line 80, :end-column 12, :arglists (quote ([a])), :doc "Same as, but much more efficient than, last.\n  If the array is empty, returns nil."}, :name wagjo.data.array/peekr, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Same as, but much more efficient than, last.\n  If the array is empty, returns nil."}, index-of {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 543, :column 7, :end-line 543, :end-column 15, :arglists (quote ([a val])), :doc "Returns index of val inside a.\n  Returns -1 if val was not found."}, :name wagjo.data.array/index-of, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 15, :method-params ([a val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 543, :end-line 543, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a val])), :doc "Returns index of val inside a.\n  Returns -1 if val was not found."}, trim {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 392, :column 7, :end-line 392, :end-column 11, :arglists (quote ([a nl nr])), :doc "Returns new array with nl items trimmed from left and nr items\n  trimmed from right."}, :name wagjo.data.array/trim, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 11, :method-params ([a nl nr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a nl nr])), :doc "Returns new array with nl items trimmed from left and nr items\n  trimmed from right."}, triml {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 382, :column 7, :end-line 382, :end-column 12, :arglists (quote ([a n])), :doc "Returns new array with n items trimmed from left."}, :name wagjo.data.array/triml, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 12, :method-params ([a n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a n])), :doc "Returns new array with n items trimmed from left."}, reduce2-kv-reverse {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\resources\\public\\js\\out\\wagjo\\data\\array.cljs", :line 528, :column 7, :end-line 528, :end-column 25, :arglists (quote ([f a])), :doc "Reverse array reduce. Very fast."}, :name wagjo.data.array/reduce2-kv-reverse, :variadic false, :file "resources\\public\\js\\out\\wagjo\\data\\array.cljs", :end-column 25, :method-params ([f a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 528, :end-line 528, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f a])), :doc "Reverse array reduce. Very fast."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc "Array manipulation."}