;; Analyzed by ClojureScript 1.7.48
{:use-macros nil, :excludes #{}, :name p3r50na.apps.bookof5rinds.client.game.collision, :imports nil, :requires nil, :uses nil, :defs {block-intersections {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\src\\p3r50na\\apps\\bookof5rinds\\client\\game\\collision.cljs", :line 4, :column 7, :end-line 4, :end-column 26, :arglists (quote ([rect blocks blocksize]))}, :name p3r50na.apps.bookof5rinds.client.game.collision/block-intersections, :variadic false, :file "src\\p3r50na\\apps\\bookof5rinds\\client\\game\\collision.cljs", :end-column 26, :method-params ([rect blocks blocksize]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rect blocks blocksize]))}, rect-intersects-blocks? {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\src\\p3r50na\\apps\\bookof5rinds\\client\\game\\collision.cljs", :line 15, :column 7, :end-line 15, :end-column 30, :arglists (quote ([rect blocks blocksize]))}, :name p3r50na.apps.bookof5rinds.client.game.collision/rect-intersects-blocks?, :variadic false, :file "src\\p3r50na\\apps\\bookof5rinds\\client\\game\\collision.cljs", :end-column 30, :method-params ([rect blocks blocksize]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rect blocks blocksize]))}, rect-intersects-boundary? {:protocol-inline nil, :meta {:file "C:\\cygwin64\\progg\\p3r50na\\src\\p3r50na\\apps\\bookof5rinds\\client\\game\\collision.cljs", :line 21, :column 7, :end-line 21, :end-column 32, :arglists (quote ([rect map]))}, :name p3r50na.apps.bookof5rinds.client.game.collision/rect-intersects-boundary?, :variadic false, :file "src\\p3r50na\\apps\\bookof5rinds\\client\\game\\collision.cljs", :end-column 32, :method-params ([rect map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rect map]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :size :x}, :order [:x :y :size]}, :doc nil}